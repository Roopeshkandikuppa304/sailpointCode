<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Test rj bank signature domestic" significantModified="1709109415973">
          
    
    <Source><![CDATA[
  import java.sql.*;
  import java.io.*;
  import sailpoint.tools.GeneralException;
  import net.sourceforge.jtds.jdbc.Driver;
  import sailpoint.api.SailPointContext;
  import sailpoint.object.Application;
  import sailpoint.object.ManagedAttribute;  
  import sailpoint.object.Identity;
  import sailpoint.object.Filter;
  import sailpoint.object.QueryOptions;
  import java.util.ArrayList;
  import java.lang.StringBuilder;
  import java.io.BufferedWriter;
  import java.io.BufferedReader;
  import java.io.File;
  import java.io.FileWriter;
  import java.io.FileReader;
  import java.io.IOException;
  import java.io.FileNotFoundException;
  import com.rjf.sailpointservices.utils.ConfigPropReader;
  import sailpoint.object.Link;
  import java.io.FileInputStream; 
  import java.io.FileNotFoundException; 
  import java.util.Iterator; 
  import java.util.List; 


  public String stripGarbage(String s) {
    if (s == null)
    {
      s = " ";
    }
    StringBuilder sb = null;
    if(s != null){
      sb = new StringBuilder(s.length());
      for (int i = 0; i < s.length(); i++) {
        char ch = s.charAt(i);
        if (ch >= ' ' && ch <= '~')
        {
          sb.append(ch);
        }       
        //if ((ch >= 'A' && ch <= 'Z') || 
        //    (ch >= 'a' && ch <= 'z') ||
        //    (ch >= '0' && ch <= '9')) {
        //            sb.append(ch);
        //}        
      }
    }
    return sb.toString();
  }
  public String buildLine(String row, String grpProfile, String bank) {

    StringBuilder builder = new StringBuilder();

    return builder.append(grpProfile + "," + bank + "," + row.substring(18, 29).trim() + "," + row.substring(30, 51).trim() + "," + row.substring(52, 62) + "," + row.substring(63,72).trim()).toString();
  }


  SailPointContext ctx= context.getContext();
  String grpProfile = "";
  String bank = "";
  BufferedWriter bw = null;
  FileWriter fw = null;
  List list = new ArrayList();
  //code to read file

  try {    
    if ( ctx == null ) {
      throw new GeneralException("Unable to get sailpoint context.");
    }




    //System.out.println("RJ Bank start");

    File fileWrite = new File("D://Authoritative Delimit data/test_rj_bank_dom.csv");


    //System.out.println("RJ Bank start1");
    fileWrite.createNewFile();
    //System.out.println("RJ Bank start2");
    fw = new FileWriter(fileWrite.getAbsoluteFile()); 
    //System.out.println("RJ Bank start2.1");
    bw = new BufferedWriter(fw);
    //System.out.println("RJ Bank start3");
    String fileRead = "D://Authoritative Delimit data/test_rj_bank_dom.txt"; 
    String line = "";
    BufferedReader br = null;
    String lineRecord = "";

    try {
      br = new BufferedReader(new FileReader(fileRead));
      int rowCounter = 0;
      //System.out.println("RJ Bank start4");
      while ((line = br.readLine()) != null) {
        // use comma as separator

        rowCounter++;
        if (rowCounter > 2)
        {
          if (rowCounter == 3)
          {
            lineRecord = "GROUP PROFILE,BANK,USER,DESCRIPTION,AUTHORITY,DATA LIBRARY";
            bw.write(lineRecord);
            bw.newLine();
          }
          lineRecord = "";
          //System.out.println("rj bank line record: " + line);

          String updatedLine = stripGarbage(line);
          //System.out.println("rj bank line record: " + updatedLine);
          if (updatedLine.length() == 0 || updatedLine.trim().length() == 0)
          {
            //System.out.println("RJ Bank set line to empty no record");
            //skip
            lineRecord = "";
          }
          else if (updatedLine.trim().startsWith("Signature Security") ||
                   updatedLine.trim().startsWith("GROUP") ||
                   updatedLine.trim().startsWith("PROFILE") ||
                   updatedLine.trim().startsWith("SECURITY SYSTEM") ||
                   updatedLine.trim().startsWith("* * * * *") ||
                   (updatedLine.length() > 73 &&
                    updatedLine.substring(1,70).trim().length() == 0) ||
                   updatedLine.trim().indexOf("RAYMOND JAMES BANK") > 0)
          {
            //System.out.println("RJ Bank set line to empty unnecessary row");
            //skip
            lineRecord = "";
          }
          else if (updatedLine.length() > 72)
          {
            if (updatedLine.substring(1,17).trim().length() > 0)
            {
              if (updatedLine.substring(1,12).trim().length() > 0)
              {
                grpProfile = updatedLine.substring(1,12).trim();
              }
              if (updatedLine.substring(13, 17).trim().length() > 0)
              {
                bank = updatedLine.substring(13, 17).trim();
              }
            }
            else
            {
              if(updatedLine!=null && grpProfile!=null && bank!=null){
                //System.out.println("RJ Bank setting line record");
                lineRecord = buildLine(updatedLine, grpProfile, bank);   
              }
            }
          }

          //System.out.println("rj bank linerecord: " + "--" + lineRecord + "--");
          if (!lineRecord.equals(""))
          {
            //log.error("-----list of lines to write---"+lineRecord);
            list.add(lineRecord);
            bw.write(lineRecord);
            bw.newLine();
          }
        }
      }
      bw.close();
      fw.close();
    } catch (FileNotFoundException e) {
      e.printStackTrace();

    } catch (IOException e) {
      e.printStackTrace();
      log.error("******exception--"+e.getMessage());
    } 
    //}
  }
  catch(Exception ex) {
    bw.close();
    fw.close();
    // On error, print the stackTrace and exit
    log.error("^^^^^^^sec exception---"+ex.getMessage());    
  }


  ]]></Source>
        

</Rule>
