<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Workflow PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Workflow explicitTransitions="true" handler="sailpoint.api.StandardWorkflowHandler" libraries="Identity" name="NYU Workflow-Manual Re-Enabled Links" type="Workflow">
          
    
    <Variable input="true" name="identityName">
                    
        
        <Description>The name of the identity being updated.</Description>
                  
    
    </Variable>
          
    
    <Variable initializer="false" name="trace">
                    
        
        <Description>
      Used for debugging this workflow and when set to true trace
      will be sent to stdout.
    </Description>
                  
    
    </Variable>
          
    
    <Variable input="true" name="event">
                    
        
        <Description>
      The IdentityChangeEvent.  It can be used to build
      the provisioning plan, but does not need to be
      persisted with the case, so marked as transient.
    </Description>
                  
    
    </Variable>
          
    
    <Variable name="disabledApps"/>
          
    
    <Variable name="enabledApps" type="java.util.List"/>
          
    
    <Variable name="netId"/>
          
    
    <Variable name="errorMsg"/>
          
    
    <Variable name="successMsg"/>
          
    
    <Variable name="inputMap" type="java.util.Map"/>
          
    
    <Variable input="true" name="launcher"/>
          
    
    <Description>
    This workflow provides the steps necessary to offboard someone by the Standard Offboarding process. This does not set any security holds.
    This first checks to see if the user is Former, and exits if so. Then it checks the passed in variable for whether it should remove exception roles,
    or skip offboard if they are present. It then builds a disable plan for the users account and executes it. It then checks for an admin account,
    and if one is found, it builds and executes a disable plan for that as well. It then audits the results and calls refresh.  
  </Description>
          
    
    <Step icon="Start" name="Start" posX="50" posY="50">
                    
        
        <Transition to="Identity Submit Form"/>
                  
    
    </Step>
          
    
    <Step icon="Default" name="Identity Submit Form">
                    
        
        <Approval name="Validating Identity" owner="spadmin" return="IdentityUser,comments,shared google access" send="IdentityUser">
                              
            
            <Form name="Validate Identity">
                                        
                
                <Attributes>
                                                  
                    
                    <Map>
                                                            
                        
                        <entry key="pageTitle" value="Manual Re-Enabled Account Form"/>
                                                          
                    
                    </Map>
                                                
                
                </Attributes>
                                        
                
                <Button action="next" label="Submit"/>
                                        
                
                <Button action="cancel" label="Cancel"/>
                                        
                
                <Field columnSpan="1" displayName="Select Account" name="IdentityUser" postBack="true" required="true" type="identity"/>
                                        
                
                <Field displayName="Comments" displayType="textarea" name="comments" type="String">
                                                  
                    
                    <ValidationScript>
                                                            
                        
                        <Source><![CDATA[
            import sailpoint.object.*;
            import sailpoint.api.*;
            importsailpoint.tools.Message;
              List messages = new ArrayList();
            if (value.length() > 100){
            	return "limit reached"; 
            }
            
            ]]></Source>
                                                          
                    
                    </ValidationScript>
                                                
                
                </Field>
                                        
                
                <Field displayName="Shared Google Access" displayType="radio" name="shared google access">
                                                  
                    
                    <AllowedValues>
                                                            
                        
                        <String>Yes</String>
                                                            
                        
                        <String>No</String>
                                                          
                    
                    </AllowedValues>
                                                
                
                </Field>
                                      
            
            </Form>
                            
        
        </Approval>
                    
        
        <Transition to="Validating the User"/>
                  
    
    </Step>
          
    
    <Step icon="Task" name="Validating the User" resultVariable="enabledApps">
                    
        
        <Script>
                              
            
            <Source><![CDATA[
        import sailpoint.object.*;
        import sailpoint.api.*;
        System.out.println(".........>user"+IdentityUser);
        List enabledApps = new ArrayList();
        List disableApplications = new ArrayList();
        disableApplications.add("AD");
        disableApplications.add("LDAP");
        disableApplications.add("Shanghai AD");
        disableApplications.add("Box");
        disableApplications.add("Google Apps");
        System.out.println("=================disableApplications"+disableApplications);

        Identity user = context.getObjectById(Identity.class,IdentityUser);
        workflow.put("netId",user.getAttribute("netId"));

        System.out.println(">>>>>>>>>The Identity "+user);
        if (user == null) {
        user = context.getUniqueObject(Identity.class,Filter.eq("netId",IdentityUser));
        }
        if(user != null) {

        System.out.println("user-"+user.getDisplayName());
        if(!(user.getAttribute("primaryAffiliationStatus").equalsIgnoreCase("former"))){
        System.out.println(">>>>>>>>>In if loop"+user);
        List links = user.getLinks();
        System.out.println("-------------list of links"+links);

        for(Link link : links){
        System.out.println("-------------list of links"+link.getApplicationName()+" "+links.size());
        if(disableApplications.contains(link.getApplicationName()) && (link.isDisabled())){
        ProvisioningPlan plan = new ProvisioningPlan();
        plan.setIdentity(user);
        AccountRequest ar = new AccountRequest();
        ar.setOperation(ProvisioningPlan.AccountRequest.Operation.Enable);
        ar.setApplication(link.getApplicationName());
        ar.setNativeIdentity(link.getNativeIdentity());
        plan.add(ar);

        Provisioner provisioner = new Provisioner(context);
        provisioner.execute(plan);
        enabledApps.add(link.getApplicationName());
        }

        }
        workflow.put("enabledApps",enabledApps);

        }
        }

        return enabledApps;

      ]]></Source>
                            
        
        </Script>
                    
        
        <Transition to="Audit Step"/>
                  
    
    </Step>
          
    
    <Step icon="Task" name="Audit Step" posX="1000" posY="500">
                    
        
        <Script>
                              
            
            <Source><![CDATA[
        import sailpoint.object.*;
        import sailpoint.api.*;
        import sailpoint.object.AuditEvent;
        import sailpoint.tools.Util;

        AuditEvent event = new AuditEvent();
        event.setAction("Manual Re-Enable Accounts");
        event.setSource("Quicklink");
        event.setTarget(workflow.get("netId"));
        event.setApplication("IIQ");
        event.setAttribute("User Name :",workflow.get("netId"));

        if (enabledApps != null) {
        event.setAttribute("Enabled Applications :",Util.listToCsv(workflow.get("enabledApps")));
        } else {
        event.setAttribute("enabled Application :","None All Applications Are Already Enabled");
        }
        event.setAttribute("Success Message :","Manual Re-Enable Assignment Success");

        context.saveObject(event);
        context.commitTransaction();
        context.decache(event);

      ]]></Source>
                            
        
        </Script>
                    
        
        <Transition to="Stop"/>
                  
    
    </Step>
          
    
    <Step icon="Stop" name="end" posX="1000" posY="500"/>
        

</Workflow>
