<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Rule-SingtelAD-Password Remainder Notification" type="Validation">
          
    
    <Description>An IdentityIQ server-side rule that is executed before the connector's provisioning method is called. This gives the customer the ability to customize or react to anything in the ProvisioningPlan BEFORE it is sent to the underlying connectors used in provisioning. 
  </Description>
          
    
    <Source><![CDATA[import sailpoint.object.*;
  import sailpoint.api.*;
  import sailpoint.object.Bundle;
  import sailpoint.object.ProvisioningPlan.Operation;
  import sailpoint.object.ProvisioningPlan.AttributeRequest;
  import sailpoint.object.ProvisioningPlan.AccountRequest;
  import sailpoint.tools.*;
  import org.apache.commons.logging.Log;
  import org.apache.commons.logging.LogFactory;
  import sailpoint.api.SailPointContext;
  import java.util.Date;  
  import java.util.Locale;  
  import java.text.SimpleDateFormat;
  import java.text.Format;
  import java.time.LocalDate;
  import sailpoint.tools.Util;

  public String parseLdapDate(String ldapDate) {
    long nanoseconds = Long.parseLong(ldapDate);   // nanoseconds since target time that you want to convert to java.util.Date
    long mills = (nanoseconds / 10000000);
    long unix = (((1970 - 1601) * 365) - 3 + Math.round((1970 - 1601) / 4)) * 86400L;
    long timeStamp = mills - unix;
    Date date = new Date(timeStamp * 1000L); // *1000 is to convert seconds to milliseconds
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); // the format of your date
    //sdf.setTimeZone(TimeZone.getTimeZone("GMT")); // give a timezone reference for formating (see comment at the bottom
    String formattedDate = sdf.format(date);
    return  formattedDate;
  }

  //Filter f = Filter.or(Filter.eq("links.application.name","SINGTEL Active Directory"), Filter.eq("links.application.name","VENDOR Active Directory"), Filter.eq("links.application.name","AYROWS Active Directory"));
  //Filter f = Filter.eq("links.application.name","AD");
  Filter f = Filter.or(Filter.eq("links.application.name","AD"), Filter.eq("links.application.name","JDBC"));
  QueryOptions qo = new QueryOptions();
  qo.add(f);

  //List identities = context.getObjects(Identity.class,qo);


  EmailTemplate et = context.getObjectByName(EmailTemplate.class,"Password Expiry Notification Remainder");
  List usrMail = new ArrayList();
  List idNames = newArrayList();
  Iterator iden = context.search(Identity.class,qo);

  while( iden.hasNext()){
    Identity identity = (Identity)iden.next();
    
    Filter f = Filter.eq(
    List links = identity.getLinks();
    
    Application application = context.getObjectByName(Application.class,"AD");
    IdentityService is = new IdentityService(context);
    List links = is.getLinks(identity,application);
    if(!links.isEmpty() && links.get(0) != null){
      String pwd = links.get(0).getAttribute("pwdLastSet");
      String formatDate = parseLdapDate(pwd);

      Date date = new Date();
      Date date1 = new SimpleDateFormat("yyyy-MM-dd").parse(formatDate);
      int daysDiff = sailpoint.tools.Util.getDaysDifference(date, date1);
      int daysDiff = Math.abs(daysDiff);

      if(daysDiff == 46){
        usrMail.add(identity.getEmail());
        EmailOptions eo = null;
        Map args = new HashMap();
        args.put("identityName",identity.getFirstname());
        args.put("accountName","SINGTEL\\"+identity.getName());
        eo = new EmailOptions(usrMail,args);
        eo.setSendImmediate(true);
        eo.setNoRetry(true);

        if(eo != null) context.sendEmailNotification(et,eo);
        
      }

    }

  }








  ]]></Source>
        

</Rule>
