<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<Rule language="beanshell" name="Test TimeZone Rule">
          
    
    <Source><![CDATA[
  import java.io.BufferedReader;
  import java.io.BufferedWriter;
  import java.sql.PreparedStatement;
  import java.text.SimpleDateFormat;
  import java.util.Calendar;
  import java.util.Date;
  import java.util.GregorianCalendar;
  import java.util.HashMap;
  import java.util.Map;
  import java.util.TimeZone;

  import sailpoint.connector.Connector;

  import sailpoint.api.IncrementalObjectIterator;
  import sailpoint.object.Link;
  import sailpoint.object.QueryOptions;
  import sailpoint.task.TaskMonitor;
  import sailpoint.tools.Util;
  import org.apache.log4j.Logger;
  import org.apache.log4j.Level;
  {

    Logger logger  = Logger.getLogger("TEST.TimeZone.RUle");

    int getUserOffsetMinutes(String  WORKER_TIME_ZONE) {

      String hrs, mins;
      int factor = 0;

      String tzString = (String) WORKER_TIME_ZONE;
      if (Util.isNullOrEmpty(tzString)){
        //log.debug("Timezone for account not specified in Workday");
        return 0;
      }

      if (tzString.length() < 4){
        //log.debug("Timezone for account not formatted correcgtly: " + tzString);
        return 0;
      }

      // set user time factor
      char sign = tzString.charAt(3);
      if(sign == '-') factor = -1;
      else if (sign == '+') factor = 1;

        if (factor != 0){
        tzString = tzString.substring(4, 9);
        hrs = tzString.substring(0, 2);
        mins = tzString.substring(3, 5);

        int userOffsetMins = 60 * Integer.parseInt(hrs) + Integer.parseInt(mins);

        System.out.println("*********userOffsetMins: " + userOffsetMins);
        System.out.println("*********factor: " + factor);


        userOffsetMins *= factor;
        System.out.println("*********==========userOffsetMins: " + userOffsetMins);


        return userOffsetMins;
      }
      else {
        return 0;
      }
    }

   
    boolean userLocalExecutionTimeReached(String eventExecutionTime,Link link) {

      // get server execution time
      String worker_time_zone = null;
      String hire_Date = null;
      if(link.getAttribute("WORKER_TIME_ZONE") != null) worker_time_zone = link.getAttribute("WORKER_TIME_ZONE");
      if(link.getAttribute("hireDate") != null) hire_Date = link.getAttribute("hireDate");

      Date serverExecutionTime = new Date();
      String IDENTITY_ACTIVATE_EXECUTION_TIME  = "0:00:00";

      if(eventExecutionTime.equals(IDENTITY_ACTIVATE_EXECUTION_TIME)){
        SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        String userHireDate = (String) worker_time_zone;
        if(userHireDate != null){
          serverExecutionTime = dateFormat.parse(userHireDate);
        }
      }

      Calendar serverExecutionCal = GregorianCalendar.getInstance();
      TimeZone.setDefault( TimeZone.getTimeZone(worker_time_zone.substring(0,9)));
      serverExecutionCal.setTime(serverExecutionTime);

      String execTimeStr = eventExecutionTime;
      String[] t = execTimeStr.split(":");
      int hh = Integer.parseInt(t[0].trim());
      int mm = Integer.parseInt(t[1].trim());
      int ss = Integer.parseInt(t[2].trim());

      serverExecutionCal.set(Calendar.HOUR_OF_DAY, hh);
      serverExecutionCal.set(Calendar.MINUTE, mm);
      serverExecutionCal.set(Calendar.SECOND, ss);
      serverExecutionTime = serverExecutionCal.getTime();



      //Date serverExecutionTime = setServerExecutionTime(eventExecutionTime,HIREDATE);
      System.out.println("serverExecutionTime: " + serverExecutionTime);


      SimpleDateFormat sdfHHMM = new SimpleDateFormat("HH:mm");

      // get server current time
      //Date serverCurrentTime = Util.getEndOfDay(Util.stringToDate("03/03/2023"));
      Calendar serverExecutionCal = GregorianCalendar.getInstance();
      //serverExecutionCal.setTime(serverExecutionTime);


      serverExecutionCal.set(Calendar.HOUR_OF_DAY, 02);
      serverExecutionCal.set(Calendar.MINUTE, 39);
      serverExecutionCal.set(Calendar.SECOND, 20);
      //Date serverCurrentTime = serverExecutionCal.getTime();
      Date serverCurrentTime = Util.getEndOfDay(Util.stringToDate(hire_Date));
      System.out.println("serverCurrentTime: " + serverCurrentTime);


      // calculate minutes to server execution time
      int serverMinsToExecTime = (int) ((serverExecutionTime.getTime() - serverCurrentTime.getTime()) / 60000);
      //logMessage("serverMinsToExecTime: " + serverMinsToExecTime);

      System.out.println("serverExecutionTime.getTime(): " + serverExecutionTime.getTime());

      System.out.println("serverCurrentTime.getTime(): " + serverCurrentTime.getTime());



      // obtain server time zone and calculate server offset minutes
      TimeZone tzServer = TimeZone.getDefault();
      System.out.println("TimeZone.getDefault(): " + TimeZone.getDefault());

      int serverOffsetMins = tzServer.getRawOffset() / 60000;

      System.out.println("serverOffsetMins: " + serverOffsetMins);


      // calculate user offset minutes
      int userOffsetMins = getUserOffsetMinutes(worker_time_zone);

      //logMessage("userOffsetMins: " + userOffsetMins);
      System.out.println("userOffsetMins: " + userOffsetMins);

      // obtain user-server diff minutes
      int userServerDiffMins = userOffsetMins - serverOffsetMins;
      //logMessage("userServerDiffMins: " + userServerDiffMins);

      // calculate minutes to user execution time
      int userMinsToExecTime = serverMinsToExecTime - userServerDiffMins;

      System.out.println("userMinsToExecTime: " + userMinsToExecTime);

      if (userMinsToExecTime >= 1440) userMinsToExecTime -= 1440;

      // execute termination process if the local user time is within 30 minutes of termination execution time (23:59)
      if (userMinsToExecTime <= 30){
        TimeZone.setDefault( TimeZone.getTimeZone("GMT-05:00"));
        System.out.println("--------TimeZone.getDefault(): " + TimeZone.getDefault());

        return true;
      }
      else{
        TimeZone.setDefault( TimeZone.getTimeZone("GMT-05:00"));
        System.out.println("--------TimeZone.getDefault(): " + TimeZone.getDefault());
        return false;
      }
    }
    return userLocalExecutionTimeReached("23:59:00","03/09/2023");
  }

  ]]></Source>
        

</Rule>
